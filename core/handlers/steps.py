import re
import os
import json
from dotenv import load_dotenv

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from core.keyboards import std_kb, inline_kb
from core.keyboards.inline_kb import kb_inline_warehouse, kb_inline_confirmation
from core.others.get_date import get_dates
from core.others.get_warehouse import get_wh_names
from core.others.states_user import States
from core.others.write_gsheet import write_new_op

load_dotenv()

router = Router()

users_data = json.loads(os.environ["USERS"])
users = [int(i) for i in users_data.values()]


@router.message(Command(commands=['start', 'new_operation']))
async def get_menu(message: Message, state: FSMContext):
    if message.from_user.id in users:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.first_name}</b>, —è –∫–∞—Å—Å–æ–≤—ã–π –±–æ—Ç –ö—Ä–∏—Å ü§ñ.\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –∫–∞—Å—Å—É –ø—Ä—è–º–æ –æ—Ç—Å—é–¥–∞.ü§ëüìÜ",
            reply_markup=await std_kb.main_keyboard()
        )
    else:
        await message.answer('C –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º–∏ –Ω–µ –≥–æ–≤–æ—Ä—é')


@router.message(F.text == '–ó–∞–ø–∏—Å–∞—Ç—å –≤ –∫–∞—Å—Å—É ‚úèÔ∏è')
async def get_operation(message: Message, state: FSMContext):
    await message.answer(
        f"–ù–∞—á–Ω–µ–º. –í—ã–±–µ—Ä–∏ <b>—Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏</b>:",
        reply_markup=await std_kb.operation_keyboard()
    )
    await state.set_state(States.state_choice)


@router.callback_query(States.state_confirmation)
async def get_confirmation(call: CallbackQuery, state: FSMContext):
    data_called = call.data.split('=')[1]
    if data_called == "canceled":
        await call.message.edit_text('–û—Ç–º–µ–Ω–µ–Ω–æ...')
        await state.clear()
    else:
        data = await state.get_data()
        result = await write_new_op(data)
        if result is True:
            await call.message.edit_text(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É \r\n\n"
                f"–¢–∏–ø:  <b>{data['type']}</b>\r\n"
                f"üìÖ –î–∞—Ç–∞:  <b>{data['date']}</b>\r\n"
                f"üí∏ C—É–º–º–∞:  <b>{data['amount']}</b> —Ä—É–±.\r\n"
                f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:  <b>{data['comment']}</b>\r\n"
                f"üíÅüèª‚Äç –°–∫–ª–∞–¥/–ª–∏—Ü–æ:  <b>{data['warehouse']}</b>"
            )
            await call.message.answer(
                f"–ì–æ—Ç–æ–≤–æ!",
                reply_markup=await std_kb.main_keyboard()
            )
            await state.set_state(States.state_confirmed)


@router.callback_query(States.state_subject)
async def get_op_warehouse(call: CallbackQuery, state: FSMContext):
    data_called = call.data.split('=')[1]
    data = await state.get_data()
    await state.update_data(warehouse=data_called)
    await call.message.edit_text(
        f"–¢–∏–ø:  <b>{data['type']}</b>\r\n"
        f"üìÖ –î–∞—Ç–∞:  <b>{data['date']}</b>\r\n"
        f"üí∏ C—É–º–º–∞:  <b>{data['amount']}</b> —Ä—É–±.\r\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:  <b>{data['comment']}</b>\r\n"
        f"üíÅüèª‚Äç –°–∫–ª–∞–¥/–ª–∏—Ü–æ:  <b>{data_called}</b>",
        reply_markup=await kb_inline_confirmation()
    )

    await state.set_state(States.state_confirmation)


@router.message(States.state_search_wh)
async def get_op_search_result(message: Message, state: FSMContext):
    search_result = await get_wh_names(message.text)
    if len(search_result) == 0:
        await message.reply(f"–ü—Ä–æ–≤–µ—Ä—å –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")

    else:
        await message.answer(
            f"–ù–∞–π–¥–µ–Ω–æ: <b>{len(search_result)}</b>\r\n"
            f"–í—ã–±–µ—Ä–µ—Ç–µ —Å–∫–ª–∞–¥ –Ω–∏–∂–µ:",
            reply_markup=await kb_inline_warehouse(search_result)
        )
        await state.set_state(States.state_subject)


@router.message(States.state_comment)
async def get_op_comment(message: Message, state: FSMContext):
    await message.answer(
        f"–ö–æ–º–º–µ–Ω—Ç: {message.text}\r\n"
        f"–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. 3 –±—É–∫–≤—ã —Å–∫–ª–∞–¥–∞ üè≠:"
    )
    await state.update_data(comment=message.text)
    await state.set_state(States.state_search_wh)


@router.message(States.state_amount)
async def get_op_amount(message: Message, state: FSMContext):
    result = re.match(r'^(\-)?\d+(\,\d{1,2})?$', message.text)

    if not result:
        return await message.answer('–°—É–º–º–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É')

    await message.answer(
        f"C—É–º–º–∞: <b>{message.text}</b> —Ä—É–±.\r\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"
    )
    await state.update_data(amount=message.text)
    await state.set_state(States.state_comment)


@router.callback_query(States.state_date)
async def set_op_date(call: CallbackQuery, state: FSMContext):
    data_called = call.data.split('=')[1]
    data = await state.get_data()
    type_needed = data['type']
    await call.message.edit_text(
        f"–¢–∏–ø: <b>{type_needed}</b>\r\n"
        f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: <b>{data_called}</b>,\r\n"
        f"–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö üí∏:"
    )

    await state.set_state(States.state_amount)
    await state.update_data(date=data_called)


@router.message(States.state_choice)
async def get_op_date(message: Message, state: FSMContext):
    await state.update_data(user=message.from_user.id)
    dates = reversed(get_dates())  # –ü–æ–ª—É—á–∞–µ–º 3 –¥–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
    await message.answer(
        f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=await inline_kb.kb_inline_date(dates)
    )
    await state.update_data(type=message.text.split(' ')[0])
    await state.set_state(States.state_date)


@router.message(States.state_confirmed)
async def make_op_again(message: Message, state: FSMContext):
    await state.clear()